@misc{rfc6749,
	series =	{Request for Comments},
	number =	6749,
	howpublished =	{RFC 6749},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC6749},
	url =		{https://rfc-editor.org/rfc/rfc6749.txt},
        author =	{Dick Hardt},
	title =		{{The OAuth 2.0 Authorization Framework}},
	pagetotal =	76,
	year =		2012,
	month =		oct,
	abstract =	{The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf. This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849. {[}STANDARDS-TRACK{]}},
}

@misc{rfc7519,
	series =	{Request for Comments},
	number =	7519,
	howpublished =	{RFC 7519},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC7519},
	url =		{https://rfc-editor.org/rfc/rfc7519.txt},
        author =	{Michael Jones and John Bradley and Nat Sakimura},
	title =		{{JSON Web Token (JWT)}},
	pagetotal =	30,
	year =		2015,
	month =		may,
	abstract =	{JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.},
}

@misc{rfc7636,
	series =	{Request for Comments},
	number =	7636,
	howpublished =	{RFC 7636},
	publisher =	{RFC Editor},
	doi =		{10.17487/RFC7636},
	url =		{https://rfc-editor.org/rfc/rfc7636.txt},
        author =	{Nat Sakimura and John Bradley and Naveen Agarwal},
	title =		{{Proof Key for Code Exchange by OAuth Public Clients}},
	pagetotal =	20,
	year =		2015,
	month =		sep,
	abstract =	{OAuth 2.0 public clients utilizing the Authorization Code Grant are susceptible to the authorization code interception attack. This specification describes the attack as well as a technique to mitigate against the threat through the use of Proof Key for Code Exchange (PKCE, pronounced "pixy").},
}

@misc{OpenID.Core,
	series =	{Request for Comments},
	publisher =	{OpenID Foundation},
	url =		{http://openid.net/specs/openid-connect-core-1_0.html},
        author =	{Nat Sakimura and John Bradley and Michael B. Jones and Brende de Medeiros and Chuck Mortimore},
	title =		{{OpenID Connect Core 1.0 incorporating errata set 1}},
	year =		2014,
	month =		nov,
	day = 		8,
	abstract =	{OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0 protocol. It enables Clients to verify the identity of the End-User based on the authentication performed by an Authorization Server, as well as to obtain basic profile information about the End-User in an interoperable and REST-like manner.},
}

@techreport{ietf-oauth-security-topics-18,
	number =	{draft-ietf-oauth-security-topics-18},
	type =		{Internet-Draft},
	institution =	{Internet Engineering Task Force},
	publisher =	{Internet Engineering Task Force},
	note =		{Work in Progress},
	url =		{https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics-18},
        author =	{Torsten Lodderstedt and John Bradley and Andrey Labunets and Daniel Fett},
	title =		{{OAuth 2.0 Security Best Current Practice}},
	pagetotal =	53,
	year =		2021,
	month =		apr,
	day =		13,
	abstract =	{This document describes best current security practice for OAuth 2.0. It updates and extends the OAuth 2.0 Security Threat Model to incorporate practical experiences gathered since OAuth 2.0 was published and covers new threats relevant due to the broader application of OAuth 2.0.},
}